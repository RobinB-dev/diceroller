:root {
  --yellow: #ffc600;
  --light: #efeeee;
  --black: #272727;
  --bleu: #3742FA;
  --grey: #707070;
  --shadowWhite: #ffffffbb;
  --shadowBlack: #00000025;
}

h1{
  font-size: 30px;
  color: var(--bleu);
}
h2{
  font-size: 20px;
  color: var(--black);
}
h3{
  font-size: 20px;
  color: var(--bleu);
}
h4{
  font-size: 30px;
  color: #ffffff;    
  background-color: var(--bleu);
  border-radius: 50px;
  width: 150px;
  height: 35px;
}
p{
  font-size: 15px;
  color: var(--grey);
}
html {
  /* border-box box model allows us to add padding and border to our elements without increasing their size */
  box-sizing: border-box;
  /* A system font stack so things load nice and quick! */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: 900;
  font-size: 10px;
  color: var(--black);
  text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);
}

/*
  WAT IS THIS?!
  We inherit box-sizing: border-box; from our <html> selector
  Apparently this is a bit better than applying box-sizing: border-box; directly to the * selector
*/
*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  /* background-image: url("./images/topography.svg"),
    linear-gradient(110deg, #f93d66, #6d47d9); */
  background-color: var(--light);
  background-size: 340px, auto;
  min-height: calc(100vh - 100px);
  /* margin-top: 50px; */
  /* background: white; */
  background-attachment: fixed;
  letter-spacing: -1px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0 0 5px 0;
}
/* Each item in our grid will contain numbers */
.item {
  /* We center the contents of these items. You can also do this with flexbox too! */
  display: grid;
  justify-content: center;
  align-items: center;
  border: 5px solid var(--light);
  border-radius: 3px;
  font-size: 35px;
  background-color: var(--light);
}

.item p {
  margin: 0 0 5px 0;
}


.btn {
  min-width: 150px;
  padding: 10px 10px;
  margin: 20px;
  /* background: var(--light); */
  background: var(--bleu);
  border: none;
  border-radius: 25px;
  /* color: var(--bleu); */
  color: white;
  font-size: 15px;
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 2px;
  box-shadow: -4px -4px 10px 0 var(--shadowWhite),
    4px 4px 10px 0 var(--shadowBlack);
}

.btn:hover {
  box-shadow: inset -7px -7px 20px 0 #ffffff25,
    inset 7px 7px 20px 0 var(--shadowBlack);
}



.container {
  display: grid;
  grid-gap: 20px;
  grid-template-columns: 1fr 415px 120px 415px 1fr;
  grid-template-rows: repeat(5, 125px);
  grid-template-areas:
    "dead1  diceArea   middlebar results dead2"
    "dead1  diceArea   middlebar results dead2"
    "dead1  diceArea    middlebar stats dead2"
    "dead1  throw    middlebar stats dead2"
    "dead1  throw    middlebar stats dead2"
}

.throw {
  grid-area: throw;
}

.dead1 {
  grid-area: dead1;
}

.dead2 {
  grid-area: dead2;
}

.diceArea {
  grid-area: diceArea;
  background:var(--light);
}

.results {
  grid-area: results;
}

.stats {
  grid-area: stats;
}

.item3 {
  grid-area: middlebar;
}

@media (max-width: 1260px) {
  .container {
    grid-template-columns: 1fr 415px 1fr;
    grid-template-rows: repeat(2, 197.5px) 270px repeat(3, 197.5px);
    grid-template-areas:
      "dead1  diceArea  dead2"
      "dead1  diceArea  dead2"
      "dead1  throw     dead2"
      "dead1  results   dead2"
      "dead1  stats     dead2"
      "dead1  stats     dead2"
  }
}


.bb8{
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  grid-template-rows: repeat(3, 65px);
  text-align: center;
  align-items: center;
}

/* Results grid */

.resultsTitle{
  grid-column: 1 / -1;
  grid-row: 1 / 2;
}
.resultsDice{
  grid-column: 1 / 3;
  grid-row: 2 / 3;
}

.resultsDiceContainer{
  display: flex;  
  justify-content: center;
}

.resultsSum{
  grid-column: 3 / 5;
  grid-row: 2 / 3;
}
.resultsAverage{
  grid-column: 5 / 7;
  grid-row: 2 / 3;
}
.resultThrow{
  grid-column: 2 / 4;
  grid-row: 3 / 4;
}

.resultsTotal{
  grid-column: 4 / 6;
  grid-row: 3 / 4;
}


.bb9{
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(6, 35px) 60px;
  width: 400px;
  text-align: center;
  align-items: center;
  justify-items: center;
}

/* Sliders grid */
 
.slider{
  grid-column: 1 / -1;
  width: 400px;
}

.sliderScale{
  font-size: 15px;
  display: flex;
  justify-content: space-between;
  width: 400px;
  opacity: 0.2;
}

.throwButton{
  justify-content: center;
  align-items: center;
}

.bb10{
  display: grid;
  grid-template-columns: repeat(3, 138px);
  grid-template-rows: repeat(3, 138px);
  text-align: center;
  align-items: center;
  justify-items: center;
  width: 100%;
  border-radius: 28px;
  background: #EFEEEE;
  box-shadow: inset 8px 8px 16px #cbcaca, 
              inset -8px -8px 16px #ffffff;
}

/* Stats grid */

.neumoBox{
  border-radius: 20px;
  width: 28px;
  background: #EFEEEE;
  box-shadow: inset 5px 5px 7px #dcdbdb, 
              inset -5px -5px 7px #ffffff;
}

.bb11{
  display: grid;
  grid-template-columns: repeat(10, 41px);
  grid-template-rows: repeat(3, 138px);
  text-align: center;
  align-items: center;
  justify-items: center;
  width: 100%;

}

.statsTitle{
  grid-column: 1 / -1;
  grid-row: 1 / 2;
}

.statsButton{
  grid-column: -1 / 1 ;
  grid-row: 3 / 4 ;
}

.statsD1{
  grid-column: 2 / 3 ;
  grid-row: 2 / 3;
}

.statsD2{
  grid-column: 3 / 4 ;
  grid-row: 2 / 3;
}

.statsD3{
  grid-column: 4 / 5 ;
  grid-row: 2 / 3;
}

.statsD4{
  grid-column: 5 / 6 ;
  grid-row: 2 / 3;
}

.statsD5{
  grid-column: 6 / 7 ;
  grid-row: 2 / 3;  border-radius: 27px;
}

.statsD6{
  grid-column: 7 / 8 ;
  grid-row: 2 / 3;
}

.statsD7{
  grid-column: 8 / 9 ;
  grid-row: 2 / 3;
}

.statsD8{
  grid-column: 9 / 10 ;
  grid-row: 2 / 3;
}

.statsD9{
  grid-column: 10 / 11 ;
  grid-row: 2 / 3;
}
